<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seeker</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-30T02:11:17.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>一口同乐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在wxPython中如何创建列表框</title>
    <link href="http://yoursite.com/2017/05/29/wxpython_listbox/"/>
    <id>http://yoursite.com/2017/05/29/wxpython_listbox/</id>
    <published>2017-05-29T14:51:43.000Z</published>
    <updated>2017-05-30T02:11:17.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍了在wxPython中wx.ListBox的使用方法。</p>
<a id="more"></a>
<p>列表框是提供给用户选择的另一机制。选项被放置在一个矩形的窗口中，用户可以选择一个或多个。列表框比单选按钮占据较少的空间，当选项的数目相对少的时候，列表框是一个好的选择。然而，如果用户必须将滚动条拉很远才能看到所有的选项的话，那么它的效用就有所下降了。</p>
<p><img src="https://cl.ly/290V20163t2n/wxpython_listbox.jpg" alt=""></p>
<p>在wxPython中，列表框是类wx.ListBox的元素，可以通过该类的方法去处理列表中的选择。</p>
<h3 id="如何创建一个列表框"><a href="#如何创建一个列表框" class="headerlink" title="如何创建一个列表框"></a>如何创建一个列表框</h3><p>直接上代码</p>
<pre><code>import wx

class ListBoxFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1,&apos;List Box Example&apos;, size = (250,200))

        panel = wx.Panel(self,-1)
        sampleList = [&apos;zero&apos;,&apos;one&apos;,&apos;two&apos;,&apos;three&apos;,&apos;four&apos;,&apos;five&apos;,&apos;six&apos;]
        listBox = wx.ListBox(panel,-1,(20,20),(80,120),sampleList,wx.LB_SINGLE)
        listBox.SetSelection(3)

if __name__ == &apos;__main__&apos;:
    app = wx.PySimpleApp()
    ListBoxFrame().Show()
    app.MainLoop()
</code></pre><p>wx.ListBox的构造函数类似于单选框：</p>
<pre><code>wx.ListBox(parent,id,pos = wx.DefaultPosition,size = wx.DefaultSize,choices = None,style = 0,validator = wx.DefaultValidator, name=&quot;listBox&quot;)
</code></pre><p>单选框和列表框的主要区别是wx.ListBox没有label属性。</p>
<p>参数choices中放置需要显示在列表中的元素，它是一字符串的序列。</p>
<p>列表框中有三种互斥的样式，它决定用户如何从列表框中选择元素。</p>
<h3 id="列表框的选择类型样式"><a href="#列表框的选择类型样式" class="headerlink" title="列表框的选择类型样式"></a>列表框的选择类型样式</h3><p>wx.LB_EXTENDED:用户可以通过使用shift（或使用等同功能的按键）并敲击鼠标来选择一定范围内的连续选项。</p>
<p>wx.LB_MULTIPLE: 用户可以一次选择多个选项（选项可以是不连续的），相当于一组复选框。</p>
<p>wx.LB_SINGLE: 用户一次只能选一个选项。</p>
<h3 id="列表框的滚动条类型样式"><a href="#列表框的滚动条类型样式" class="headerlink" title="列表框的滚动条类型样式"></a>列表框的滚动条类型样式</h3><p>wx.LB_ALWAYS_SB: 列表框将始终显示一个垂直的滚动条。</p>
<p>wx.LB_HSCROLL: 列表框只在需要时显示一个垂直的滚动条，默认样式。</p>
<p>wx.LB_SORT：列表中的元素按字母顺序排序。</p>
<p>有两个专用于wx.ListBox的命令事件：</p>
<p>EVT_LISTBOX事件在当列表中的一个元素被选择时触发（即使它是当前所选择的元素）。</p>
<p>EVT_LISTBOX_DCLICK当列表被双击时触发。</p>
<h3 id="列表框的方法"><a href="#列表框的方法" class="headerlink" title="列表框的方法"></a>列表框的方法</h3><p><code>Append(item)</code> 把字符串项目添加到列表框的尾部。</p>
<p><code>clear()</code> 清空列表框。</p>
<p><code>Delete(n)</code> 删除列表框中索引为n的项目。</p>
<p><code>Deselect(n)</code>在多重选择列表框中，导致位于位置n的选项取消选中。</p>
<p><code>FindString(string)</code> 返回给定字符串的整数位置，如果没有发现则返回-1。</p>
<p><code>GetCount()</code> 返回列表中字符串的数量。</p>
<p><code>GetSelection()</code> 得到当前选择项的整数索引（仅对于单选列表）。</p>
<p><code>GetSelections()</code> 对于对选列表，返回包含所选项目的整数位置的元组。</p>
<p><code>GetStringSelection()</code> 返回当前选择的字符串。</p>
<p><code>SetStringSelection(string,select)</code> 使用布尔值参数select设置指定字符串或索引选项的状态。使用这种方法改变选择不触发EVT_LISTBOX事件。</p>
<p><code>GetString(n),SetString(n, string)</code> 得到或设置位置n处的字符串。</p>
<p><code>InsertItems(items, pos)</code> 插入参数items中的字符串列表到该列表框中pos参数所指定的位置前。位置0表示把项目放在列表的开头。</p>
<p><code>Selected(n)</code> 返回对应于索引为n的项目的选择状态的布尔值。</p>
<p><code>Set(choices)</code> 重新使用choices的内容设置列表框。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文介绍了在wxPython中wx.ListBox的使用方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="wxPython" scheme="http://yoursite.com/tags/wxPython/"/>
    
  </entry>
  
  <entry>
    <title>在wxpython中如何布局可视化控件</title>
    <link href="http://yoursite.com/2017/05/22/wxpython_sizer/"/>
    <id>http://yoursite.com/2017/05/22/wxpython_sizer/</id>
    <published>2017-05-22T02:04:45.000Z</published>
    <updated>2017-05-30T02:06:53.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍了如果通过Sizer解决wxpython中窗口布局的问题。</p>
<a id="more"></a>
<h2 id="常用的控件"><a href="#常用的控件" class="headerlink" title="常用的控件"></a>常用的控件</h2><p>wx.MenuBar: 在你的框架的顶部放一个菜单栏。</p>
<p>wx.Statusbar:在你的框架底部设置一个区域，来显示状态信息等等。</p>
<p>wx.ToolBar:在你的框架中放置一个工具栏。</p>
<p>wx.Control: 这里面提供了一些控件的用户接口（比如说用来显示数据或者用户输入的可视化控件），常见的wx.Control对象包括wx.Button，wx.StaticText，wx.TextCtrl和wx.ComboBox。</p>
<p>wx.Panel:它是一个容器，可以用来包含你的许多wx.Control对象。将你的wx.Control对象放入一个wx.Panel中，意味着用户可以直接将一对控件从一个可视化器件移动到另一个可视化器件上。</p>
<p>所有的可视化控件（wx.Window对象和它们的子类）可以包含许多子控件。<br>wx.Frame可以包含很多个wx.Panel对象，wx.Panel对象中又可以包含多个wx.Button，wx.StaticText和wx.TextCtrl对象，给大家一个完整的控件层次结构：</p>
<p><img src="https://cl.ly/2C0p1q0K2Q2o/download/HierarchyOfElements1.gif" alt=""></p>
<h2 id="Sizer"><a href="#Sizer" class="headerlink" title="Sizer"></a>Sizer</h2><p>Sizer用来解决在窗口和框架中可视化控件的放置问题。Sizer可以做下列事情：</p>
<p>（1）为每个控件计算合适的大小。</p>
<p>（2）通过一些包含规则放置每一个控件。</p>
<p>（3）当一个框架的大小被改变后，自动的重新计算每个控件的大小并且改变其坐标。</p>
<p>一些常见的sizers类包括：</p>
<p>（1）wx.BoxSizer，以水平或垂直的方式将控件放置在一条线上。</p>
<p>（2）wx.GridSizer，将控件以网状结构放置。</p>
<p>（3）wx.FlexGridSizer，它和wx.GridSizer相似，但是它允许以更加灵活的方式放置可视化控件。</p>
<p>可以向Sizer添加一组wx.Window对象，可以通过调用sizer.Add(window, options…)，或者调用sizer.AddMany(…)这两个方法向sizer中添加控件。每一个Sizer只处理那些被添加进来的控件。Sizer可以被嵌套。也就是说，你可以将一个Sizer添加到另一个Sizer当中。举个例子来说有两排按钮（每一排按钮通过一个水平的wx.BoxSizer进行布局），它可以包含在另一个wx.BoxSizer中，将一排按钮放在另一排按钮的上面，就像这样：<br><a href="https://cl.ly/260c0h2y2v1o/download/SizersExample1.gif" target="_blank" rel="external">https://cl.ly/260c0h2y2v1o/download/SizersExample1.gif</a></p>
<pre><code>    import wx  
    import os  

    class MainWindow(wx.Frame):  
        def __init__(self, parent, title):  
        self.dirname=&apos;&apos;  

    # A &quot;-1&quot; in the size parameter instructs wxWidgets to use the default size.  
    # In this case, we select 200px width and the default height.  
        wx.Frame.__init__(self, parent, title=title, size=(200,-1))  
        self.control = wx.TextCtrl(self, style=wx.TE_MULTILINE)  
        self.CreateStatusBar() # A Statusbar in the bottom of the window  

    # Setting up the menu.  
        filemenu= wx.Menu()  
        menuOpen = filemenu.Append(wx.ID_OPEN, &quot;&amp;Open&quot;,&quot; Open a file to edit&quot;)  
        menuAbout= filemenu.Append(wx.ID_ABOUT, &quot;&amp;About&quot;,&quot; Information about this program&quot;)  
        menuExit = filemenu.Append(wx.ID_EXIT,&quot;E&amp;xit&quot;,&quot; Terminate the program&quot;)  

    # Creating the menubar.  
        menuBar = wx.MenuBar()  
        menuBar.Append(filemenu,&quot;&amp;File&quot;) # Adding the &quot;filemenu&quot; to the MenuBar  
        self.SetMenuBar(menuBar)  # Adding the MenuBar to the Frame content.  

    # Events.  
        self.Bind(wx.EVT_MENU, self.OnOpen, menuOpen)  
        self.Bind(wx.EVT_MENU, self.OnExit, menuExit)  
        self.Bind(wx.EVT_MENU, self.OnAbout, menuAbout)  

        self.sizer2 = wx.BoxSizer(wx.HORIZONTAL)  
        self.buttons = []  
        for i in range(0, 6):  
            self.buttons.append(wx.Button(self, -1, &quot;Button &amp;&quot;+str(i)))  
            self.sizer2.Add(self.buttons[i], 1, wx.EXPAND)  

    # Use some sizers to see layout options  
        self.sizer = wx.BoxSizer(wx.VERTICAL)  
        self.sizer.Add(self.control, 1, wx.EXPAND)  
        self.sizer.Add(self.sizer2, 0, wx.EXPAND)  

    #Layout sizers  
        self.SetSizer(self.sizer)  
        self.SetAutoLayout(1)  
        self.sizer.Fit(self)  
        self.Show()  

    def OnAbout(self,e):  
    # Create a message dialog box  
        dlg = wx.MessageDialog(self, &quot; A sample editor \n in wxPython&quot;, &quot;About Sample Editor&quot;, wx.OK)  
        dlg.ShowModal() # Shows it  
        dlg.Destroy() # finally destroy it when finished.  

    def OnExit(self,e):  
        self.Close(True)  # Close the frame.  

    def OnOpen(self,e):  
    &quot;&quot;&quot; Open a file&quot;&quot;&quot;  
        dlg = wx.FileDialog(self, &quot;Choose a file&quot;, self.dirname, &quot;&quot;, &quot;*.*&quot;, wx.OPEN)  
        if dlg.ShowModal() == wx.ID_OK:  
            self.filename = dlg.GetFilename()  
            self.dirname = dlg.GetDirectory()  
            f = open(os.path.join(self.dirname, self.filename), &apos;r&apos;)  
            self.control.SetValue(f.read())  
        f.close()  
        dlg.Destroy()  

app = wx.App(False)  
frame = MainWindow(None, &quot;Sample editor&quot;)  
app.MainLoop()
</code></pre><p>sizer.Add有三个参数,<br>第一个参数指定了放入sizer的控件名。</p>
<p>第二个参数是一个宽度因子，它用来表示这个控件相对于其他控件的比例大小，比如说你有3个编辑框并且你希望它们的大小比例是3：2：1,那么当你添加这些控件的时候，你就可以将这些比例指定为这个参数。0意味着这个控件或者这个sizer将不会发生大小的变化。</p>
<p>第3个参数通常使用wx.GROW(和wx.EXPAND一样)，它意味着这个控件当在需要的时候可以改变大小。如果你使用wx.SHAPED来替代wx.GROW，那么控件的纵横比将不会发生变化。</p>
<p>第三个参数如果使用wx.ALIGN_CENTER_HORIZONTAL：控件定位在水平中间位置。<br>wx.ALIGN_CENTER_VERTICAL:控件定位在垂直方向的中间位置。<br>wx.ALIGN_CENTER:控件定位在程序窗口的正中间。</p>
<p>可从wx.ALIGN_LEFT,wx.ALIGN_TOP,wx.ALIGN_RIGHT和wx.ALIGN_BOTTOM中选择几个作为一个组合，一般选用wx.ALIGN_LEFT|wx.ALIGN_TOP。</p>
<p>当你建立了你的可视化控件之后并将它们添加到sizer（或者嵌套的sizer）里面，下一步就是告诉你的框架或者窗口去调用这个sizer，可以通过以下三个命令完成。</p>
<pre><code>window.SetSizer(sizer) # 调用SetSizer()方法告诉你的窗口或框架去使用sizer。  
window.SetAutoLayout(True) #调用SetAutoLayout()方法告诉你的窗口使用sizer去为你的控件计算位置和大小。 
sizer.Fit(window)#sizer.Fit()告诉sizer去计算所有控件的初始位置和大小。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文介绍了如果通过Sizer解决wxpython中窗口布局的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="wxPython" scheme="http://yoursite.com/tags/wxPython/"/>
    
  </entry>
  
  <entry>
    <title>如何通过Hexo和Github搭建免费静态博客</title>
    <link href="http://yoursite.com/2017/05/07/How%20to%20build%20Blog/"/>
    <id>http://yoursite.com/2017/05/07/How to build Blog/</id>
    <published>2017-05-07T14:13:25.273Z</published>
    <updated>2017-05-11T13:49:26.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍了如何了通过Hexo和Github搭建自己静态博客的详细操作步骤，内容主要针对<code>Windows</code>平台，<code>Github</code>和<code>Hexo3.0</code></p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="为什么选用Github-Pages搭建静态博客"><a href="#为什么选用Github-Pages搭建静态博客" class="headerlink" title="为什么选用Github Pages搭建静态博客"></a>为什么选用Github Pages搭建静态博客</h3><h4 id="通过Github搭建博客的原理"><a href="#通过Github搭建博客的原理" class="headerlink" title="通过Github搭建博客的原理"></a>通过Github搭建博客的原理</h4><p>Github是一个具有版本管理功能的代码仓库，每个项目有一个主页，主页内会显示项目的源文件。</p>
<p>Github通过Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以Github Pages可以被认为是用户编写的，托管在Github上的静态网页。用户通过Github提供的模板经过Hexo/Jekyll/Octopress程序再处理生成静态文件。</p>
<h4 id="通过Github搭建博客的优点"><a href="#通过Github搭建博客的优点" class="headerlink" title="通过Github搭建博客的优点"></a>通过Github搭建博客的优点</h4><ol>
<li><p>免费无限流量；</p>
</li>
<li><p>享受Git的版本管理功能；</p>
</li>
<li><p>直接通过Markdown编写文章，不需要通过编写前端页面。</p>
</li>
</ol>
<p>由于缺少数据库的关系，所以通过Github无法承载大型网站的开发，但对于搭建中小型的Blog可以完美胜任。</p>
<h3 id="了解Hexo"><a href="#了解Hexo" class="headerlink" title="了解Hexo"></a>了解Hexo</h3><p>Hexo是一个快速、简洁且高效的博客框架，其主要使用Markdown渲染引擎解析文章，在几秒内，即可利用其主题生成静态网页。</p>
<h4 id="选择Hexo还是Jekyll"><a href="#选择Hexo还是Jekyll" class="headerlink" title="选择Hexo还是Jekyll"></a>选择Hexo还是Jekyll</h4><p>相较于Jekyll，选择Hexo主要原因是：</p>
<ol>
<li>Jekyll没有本地服务器，无法实现本地博文预览功能，需要上传到WEB容器才能预览功能，而Hexo可以通过命令(Hexo s)实现本地的预览，并直接发布到WEB容器中实现同步（Hexo G）。</li>
<li>Hexo基于NodeJS实现，在Windows上安装NodeJS开发环境简单。</li>
<li>Hexo主题较多。</li>
</ol>
<h3 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h3><p><a href="https://windows.github.com/" target="_blank" rel="external">Github Windows</a></p>
<p><a href="https://desktop.github.com/" target="_blank" rel="external">Github Mac</a></p>
<h3 id="安装Node-JS"><a href="#安装Node-JS" class="headerlink" title="安装Node.JS"></a>安装Node.JS</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.JS</a></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>配置好<code>GitHub</code>家目录后，双击桌面上的<code>Git Shell</code>,输入<code>npm</code>命令即可安装</p>
<pre><code>npm install hexo-cli -g;
 npm install hexo --save;
#如果命令无法运行，可以尝试更换taobao的npm源
npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><h2 id="Hexo初始化配置"><a href="#Hexo初始化配置" class="headerlink" title="Hexo初始化配置"></a>Hexo初始化配置</h2><h3 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h3><p>安装完成后，根据自己喜好建立目录（如<code>C:\GitHub\hexo</code>），进入<code>Git Shell</code>切换到该路径下<code>C:\GitHub\hexo</code>执行以下指令</p>
<pre><code>hexo init

安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。
bash $ hexo init &lt;folder&gt;
bash $ cd &lt;folder&gt;
bash $ npm install

#新建完成后，指定文件夹的目录如下
.
├── _config.yml
├── package.json
├── scaffolds
├── scripts
├── source
|      ├── _drafts
|      └── _posts
└── themes
</code></pre><h3 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h3><pre><code>npm install hexo-generator-index --save
npm install hexo-generator-archive --save
npm install hexo-generator-category --save
npm install hexo-generator-tag --save
npm install hexo-server --save
npm install hexo-deployer-git --save
npm install hexo-deployer-heroku --save
npm install hexo-deployer-rsync --save
npm install hexo-deployer-openshift --save
npm install hexo-renderer-marked@0.2 --save
npm install hexo-renderer-stylus@0.2 --save
npm install hexo-generator-feed@1 --save
npm install hexo-generator-sitemap@1 --save
</code></pre><h3 id="Hexo简写命令"><a href="#Hexo简写命令" class="headerlink" title="Hexo简写命令"></a>Hexo简写命令</h3><pre><code>hexo n #生成文章，或者source\_posts手动编辑
hexo s #本地发布预览效果
hexo g #生成public静态文件
</code></pre><h2 id="部署静态网页到GitHub"><a href="#部署静态网页到GitHub" class="headerlink" title="部署静态网页到GitHub"></a>部署静态网页到GitHub</h2><h3 id="注册设置GitHub"><a href="#注册设置GitHub" class="headerlink" title="注册设置GitHub"></a>注册设置GitHub</h3><p>1.登入<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，注册</p>
<p>2.在主页右下角创建<code>New repository</code>,name必须和用户名一致如<code>ga021.github.io</code></p>
<p>3.随即即可访问静态主页如<a href="http://ga021.github.io/" target="_blank" rel="external">http://ga021.github.io/</a></p>
<h3 id="同步内容至GitHub"><a href="#同步内容至GitHub" class="headerlink" title="同步内容至GitHub"></a>同步内容至GitHub</h3><p>1.下载GitHub Windows</p>
<p>2.设置<code>Local path</code>如<code>C:\GitHub\</code></p>
<p>3.运行<code>Git Shell</code>切换到如<code>C:\GitHub\hexo</code>路径下</p>
<p>4.执行<code>hexo g</code>命令生成<code>public</code>文件夹</p>
<p>5.把生成的内容全部拷贝到<code>Local path</code>或其子目录</p>
<p>6.运行<code>GitHub</code>确认修改信息后执行右上角的<code>Sync</code>同步</p>
<p>7.最后访问主页观察效果</p>
<p><a href="http://ga021.github.io/" target="_blank" rel="external">http://ga021.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍了如何了通过Hexo和Github搭建自己静态博客的详细操作步骤，内容主要针对&lt;code&gt;Windows&lt;/code&gt;平台，&lt;code&gt;Github&lt;/code&gt;和&lt;code&gt;Hexo3.0&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Git简介及其常用使用指令</title>
    <link href="http://yoursite.com/2016/12/22/Skills/"/>
    <id>http://yoursite.com/2016/12/22/Skills/</id>
    <published>2016-12-22T08:30:11.000Z</published>
    <updated>2017-05-07T14:17:15.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git简而言之是一个分布式版本控制软件，相对于传统的集中式管理，Git无需联网操作，安全性高（本地存在完整的版本库），以及强大的分支管理特点。</p>
<p>本文将介绍Git常用的使用流程及指令。</p>
<a id="more"></a>
<h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
<p>用于初始化Git可以管理的文件夹。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add</div></pre></td></tr></table></figure></p>
<p>用于添加需要Git管理的文件，将文件放入暂存区。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">""</span></div></pre></td></tr></table></figure></p>
<p>用于提交Git管理的文件至工作区，其中-m后面的””用于填写提交的备注，方便文件管理。</p>
<h3 id="版本时光机"><a href="#版本时光机" class="headerlink" title="版本时光机"></a>版本时光机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard commit_id//版本控制</div></pre></td></tr></table></figure>
<p>HEAD^上一个版本，HEAD~100 往上100个版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span>//查看提交历史，用于回退</div><div class="line">$ gti reflog//查看命令历史，用于回到未来</div></pre></td></tr></table></figure></p>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch //查看分支</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch &lt;name&gt;//创建分支</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout &lt;name&gt; //切换分支</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b &lt;name&gt; //创建+切换分支</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge &lt;name&gt; //合并某分支到当前分支</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> &lt;name&gt; //删除分支</div></pre></td></tr></table></figure>
<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><p>###添加远程库<br>首先需要登入Github,点击右上角的”Create a new repo”按钮；<br>接着我们在本地的仓库下运行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add orgin git@....</div></pre></td></tr></table></figure></p>
<p>下一步我们将本地内容推送到远程库上,其中git push命令是将当前分支master推送到远程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure></p>
<p>第一次推送完成后，我们以后操作只需要使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure></p>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>打开远程库，找到Clone地址，并在本地输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:....</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h2&gt;&lt;p&gt;Git简而言之是一个分布式版本控制软件，相对于传统的集中式管理，Git无需联网操作，安全性高（本地存在完整的版本库），以及强大的分支管理特点。&lt;/p&gt;
&lt;p&gt;本文将介绍Git常用的使用流程及指令。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>彩云之南</title>
    <link href="http://yoursite.com/2016/12/22/third/"/>
    <id>http://yoursite.com/2016/12/22/third/</id>
    <published>2016-12-22T02:20:40.000Z</published>
    <updated>2016-12-22T08:26:24.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Photos"><a href="#Photos" class="headerlink" title="Photos"></a>Photos</h2><a id="more"></a>
<p><img src="https://cl.ly/1f3o0Z3J1j1t/IMG_3728.JPG" alt=""></p>
<p><img src="https://cl.ly/3m0A162x1Q2k/IMG_3997(20161221-082301" alt="">.jpg)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Photos&quot;&gt;&lt;a href=&quot;#Photos&quot; class=&quot;headerlink&quot; title=&quot;Photos&quot;&gt;&lt;/a&gt;Photos&lt;/h2&gt;
    
    </summary>
    
      <category term="Photographing" scheme="http://yoursite.com/categories/Photographing/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Basic Skills</title>
    <link href="http://yoursite.com/2016/12/16/hello-world/"/>
    <id>http://yoursite.com/2016/12/16/hello-world/</id>
    <published>2016-12-16T03:54:46.569Z</published>
    <updated>2017-05-10T02:17:35.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
      <category term="Testing" scheme="http://yoursite.com/categories/Testing/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
